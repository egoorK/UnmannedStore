// <auto-generated />
using System;
using BasketFormation.Persitence.ContextsDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BasketFormation.Persitence.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220608164323_mgr1")]
    partial class mgr1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BasketFormation.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Account_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Account_ID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Account_ID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Account_ID = new Guid("c370b962-0eb5-404c-b3d6-8373b79feb92"),
                            Username = "Владимир"
                        },
                        new
                        {
                            Account_ID = new Guid("817d8895-4a86-4d83-9cab-44c6adda1e99"),
                            Username = "Евгений"
                        },
                        new
                        {
                            Account_ID = new Guid("df52bca9-3e33-489e-8ce5-cd665c163589"),
                            Username = "Екатерина"
                        });
                });

            modelBuilder.Entity("BasketFormation.Domain.Entities.CartContents", b =>
                {
                    b.Property<Guid>("CartContents_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("CartContents_ID");

                    b.Property<decimal>("Discount_price")
                        .HasColumnType("numeric");

                    b.Property<int>("Item_number_in_cart")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price_incl_quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShoppingCartID")
                        .HasColumnType("uuid");

                    b.HasKey("CartContents_ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShoppingCartID");

                    b.ToTable("CartContents");
                });

            modelBuilder.Entity("BasketFormation.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Product_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Product_ID");

                    b.Property<string>("Article_number")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Unit_price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.HasKey("Product_ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Product_ID = new Guid("730b2a39-cb74-4eb0-ab90-43de3970caae"),
                            Article_number = "54356375673",
                            Name = "Сывороточный напиток. Мажитэль ананас манго",
                            Unit_price = 45.60m
                        },
                        new
                        {
                            Product_ID = new Guid("f35200f7-bd6c-4110-b3d3-72f6378634a8"),
                            Article_number = "988797345",
                            Name = "Йогурт. Активиа чернослив",
                            Unit_price = 78.90m
                        },
                        new
                        {
                            Product_ID = new Guid("4eea67a3-9b8c-47a5-b19c-5dac727d7cab"),
                            Article_number = "56756867",
                            Name = "Йогурт. Активиа киви и мюсли",
                            Unit_price = 79.45m
                        });
                });

            modelBuilder.Entity("BasketFormation.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<Guid>("ShoppingCart_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ShoppingCart_ID");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Fill_end_time")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Fill_start_time")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("Total_with_discount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total_without_discount")
                        .HasColumnType("numeric");

                    b.HasKey("ShoppingCart_ID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("BasketFormation.Domain.Entities.CartContents", b =>
                {
                    b.HasOne("BasketFormation.Domain.Entities.Product", "Product")
                        .WithMany("CartContents")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasketFormation.Domain.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("CartContents")
                        .HasForeignKey("ShoppingCartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("BasketFormation.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("BasketFormation.Domain.Entities.Account", "Account")
                        .WithOne("Basket")
                        .HasForeignKey("BasketFormation.Domain.Entities.ShoppingCart", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BasketFormation.Domain.Entities.Account", b =>
                {
                    b.Navigation("Basket");
                });

            modelBuilder.Entity("BasketFormation.Domain.Entities.Product", b =>
                {
                    b.Navigation("CartContents");
                });

            modelBuilder.Entity("BasketFormation.Domain.Entities.ShoppingCart", b =>
                {
                    b.Navigation("CartContents");
                });
#pragma warning restore 612, 618
        }
    }
}
