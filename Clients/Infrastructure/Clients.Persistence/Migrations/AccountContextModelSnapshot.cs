// <auto-generated />
using System;
using Clients.Persistence.ContextsDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Clients.Persistence.Migrations
{
    [DbContext(typeof(AccountContext))]
    partial class AccountContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AccountUserDevice", b =>
                {
                    b.Property<Guid>("AccountsAccount_ID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserDevicesDevice_ID")
                        .HasColumnType("uuid");

                    b.HasKey("AccountsAccount_ID", "UserDevicesDevice_ID");

                    b.HasIndex("UserDevicesDevice_ID");

                    b.ToTable("AccountUserDevice");
                });

            modelBuilder.Entity("Clients.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Account_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Account_ID");

                    b.Property<DateTime>("Date_of_Birth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Phone_number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Account_ID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Account_ID = new Guid("c370b962-0eb5-404c-b3d6-8373b79feb92"),
                            Date_of_Birth = new DateTime(1987, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vladimiR@mail.ru",
                            Phone_number = "89763547685",
                            Username = "Владимир"
                        },
                        new
                        {
                            Account_ID = new Guid("817d8895-4a86-4d83-9cab-44c6adda1e99"),
                            Date_of_Birth = new DateTime(1990, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zhenya@mail.ru",
                            Phone_number = "89981329864",
                            Username = "Евгений"
                        },
                        new
                        {
                            Account_ID = new Guid("df52bca9-3e33-489e-8ce5-cd665c163589"),
                            Date_of_Birth = new DateTime(1995, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "katty@mail.ru",
                            Phone_number = "89807432312",
                            Username = "Екатерина"
                        });
                });

            modelBuilder.Entity("Clients.Domain.Entities.UserDevice", b =>
                {
                    b.Property<Guid>("Device_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Device_ID");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<int>("Screen_resolution_height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Screen_resolution_width")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Device_ID");

                    b.ToTable("UserDevices");

                    b.HasData(
                        new
                        {
                            Device_ID = new Guid("bfd88510-b501-411d-a7d0-6bc6c2a77956"),
                            Brand = "Huawei",
                            Model = "P50 Pro",
                            Screen_resolution_height = 2700,
                            Screen_resolution_width = 1228
                        },
                        new
                        {
                            Device_ID = new Guid("581be8ec-e28e-4085-92f5-072ebc28ae58"),
                            Brand = "Samsung",
                            Model = "Galaxy S21",
                            Screen_resolution_height = 2400,
                            Screen_resolution_width = 1080
                        },
                        new
                        {
                            Device_ID = new Guid("501edfcc-641d-4343-8a5c-c46b817a2980"),
                            Brand = "Xiaomi",
                            Model = "Mi 11 Lite",
                            Screen_resolution_height = 2400,
                            Screen_resolution_width = 1080
                        });
                });

            modelBuilder.Entity("AccountUserDevice", b =>
                {
                    b.HasOne("Clients.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsAccount_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clients.Domain.Entities.UserDevice", null)
                        .WithMany()
                        .HasForeignKey("UserDevicesDevice_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
